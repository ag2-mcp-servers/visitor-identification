# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T03:33:28+00:00



import argparse
import json
import os
from typing import *
from typing import Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import (
    APIKeyHeader,
    APIKeyQuery,
    BaseSecurity,
    UnsuportedSecurityStub,
)

from models import (
    Error,
    IdentificationTokenGenerationRequest,
    IdentificationTokenResponse,
)

app = MCPProxy(
    description='The Visitor Identification API allows you to pass identification information to the HubSpot chat widget for otherwise unknown visitors that were verified by your own authentication system.',
    title='Visitor Identification',
    version='v3',
    servers=[{'url': 'https://api.hubapi.com/'}],
)


@app.post(
    '/conversations/v3/visitor-identification/tokens/create',
    description=""" Generates a new visitor identification token. This token will be unique every time this endpoint is called, even if called with the same email address. This token is temporary and will expire after 12 hours """,
    tags=['authentication_token_generation'],
    security=[
        APIKeyQuery(name="hapikey"),
        UnsuportedSecurityStub(name="None"),
        APIKeyHeader(name="private-app-legacy"),
    ],
)
def post__visitor_identification_v3_tokens_create_generate_token(
    body: IdentificationTokenGenerationRequest,
):
    """
    Generate a token
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
