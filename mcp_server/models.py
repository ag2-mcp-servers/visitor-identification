# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T03:33:28+00:00

from __future__ import annotations

from typing import Dict, List, Optional
from uuid import UUID

from pydantic import BaseModel, Field


class ErrorDetail(BaseModel):
    code: Optional[str] = Field(
        None, description='The status code associated with the error detail'
    )
    context: Optional[Dict[str, List[str]]] = Field(
        None,
        description='Context about the error condition',
        examples=[{'missingScopes': ['scope1', 'scope2']}],
    )
    in_: Optional[str] = Field(
        None,
        alias='in',
        description='The name of the field or parameter in which the error was found.',
    )
    message: str = Field(
        ...,
        description='A human readable message describing the error along with remediation steps where appropriate',
    )
    subCategory: Optional[str] = Field(
        None,
        description='A specific category that contains more specific detail about the error',
    )


class IdentificationTokenGenerationRequest(BaseModel):
    email: str = Field(
        ..., description='The email of the visitor that you wish to identify'
    )
    firstName: Optional[str] = Field(
        None,
        description='The first name of the visitor that you wish to identify. This value will only be set in HubSpot for new contacts and existing contacts where first name is unknown. Optional.',
    )
    lastName: Optional[str] = Field(
        None,
        description='The last name of the visitor that you wish to identify. This value will only be set in HubSpot for new contacts and existing contacts where last name is unknown. Optional.',
    )


class IdentificationTokenResponse(BaseModel):
    token: str


class Error(BaseModel):
    category: str = Field(..., description='The error category')
    context: Optional[Dict[str, List[str]]] = Field(
        None,
        description='Context about the error condition',
        examples=[
            {
                'invalidPropertyName': ['propertyValue'],
                'missingScopes': ['scope1', 'scope2'],
            }
        ],
    )
    correlationId: UUID = Field(
        ...,
        description='A unique identifier for the request. Include this value with any error reports or support tickets',
        examples=['aeb5f871-7f07-4993-9211-075dc63e7cbf'],
    )
    errors: Optional[List[ErrorDetail]] = Field(
        None, description='further information about the error'
    )
    links: Optional[Dict[str, str]] = Field(
        None,
        description='A map of link names to associated URIs containing documentation about the error or recommended remediation steps',
    )
    message: str = Field(
        ...,
        description='A human readable message describing the error along with remediation steps where appropriate',
        examples=['An error occurred'],
    )
    subCategory: Optional[str] = Field(
        None,
        description='A specific category that contains more specific detail about the error',
    )
